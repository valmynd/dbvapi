/* testcls.c generated by valac 0.16.0, the Vala compiler
 * generated from testcls.vala, do not modify */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>


#define TYPE_ADRESS (adress_get_type ())
#define ADRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ADRESS, Adress))
#define ADRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ADRESS, AdressClass))
#define IS_ADRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ADRESS))
#define IS_ADRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ADRESS))
#define ADRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ADRESS, AdressClass))

typedef struct _Adress Adress;
typedef struct _AdressClass AdressClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ParamSpecAdress ParamSpecAdress;
#define _adress_unref0(var) ((var == NULL) ? NULL : (var = (adress_unref (var), NULL)))

struct _Adress {
	GTypeInstance parent_instance;
	volatile int ref_count;
	gchar* _street;
	gchar* _housenr;
};

struct _AdressClass {
	GTypeClass parent_class;
	void (*finalize) (Adress *self);
};

struct _ParamSpecAdress {
	GParamSpec parent_instance;
};


static gpointer adress_parent_class = NULL;

gpointer adress_ref (gpointer instance);
void adress_unref (gpointer instance);
GParamSpec* param_spec_adress (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_adress (GValue* value, gpointer v_object);
void value_take_adress (GValue* value, gpointer v_object);
gpointer value_get_adress (const GValue* value);
GType adress_get_type (void) G_GNUC_CONST;
enum  {
	ADRESS_DUMMY_PROPERTY
};
Adress* adress_new (void);
Adress* adress_construct (GType object_type);
const gchar* adress_get_street (Adress* self);
void adress_set_street (Adress* self, const gchar* value);
const gchar* adress_get_housenr (Adress* self);
void adress_set_housenr (Adress* self, const gchar* value);
static void adress_finalize (Adress* obj);
gint _vala_main (void);


Adress* adress_construct (GType object_type) {
	Adress* self = NULL;
	self = (Adress*) g_type_create_instance (object_type);
	return self;
}


Adress* adress_new (void) {
	return adress_construct (TYPE_ADRESS);
}


const gchar* adress_get_street (Adress* self) {
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->_street;
	result = _tmp0_;
	return result;
}


void adress_set_street (Adress* self, const gchar* value) {
	const gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = value;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 (self->_street);
	self->_street = _tmp1_;
}


const gchar* adress_get_housenr (Adress* self) {
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->_housenr;
	result = _tmp0_;
	return result;
}


void adress_set_housenr (Adress* self, const gchar* value) {
	const gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = value;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 (self->_housenr);
	self->_housenr = _tmp1_;
}


static void value_adress_init (GValue* value) {
	value->data[0].v_pointer = NULL;
}


static void value_adress_free_value (GValue* value) {
	if (value->data[0].v_pointer) {
		adress_unref (value->data[0].v_pointer);
	}
}


static void value_adress_copy_value (const GValue* src_value, GValue* dest_value) {
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = adress_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer value_adress_peek_pointer (const GValue* value) {
	return value->data[0].v_pointer;
}


static gchar* value_adress_collect_value (GValue* value, guint n_collect_values, GTypeCValue* collect_values, guint collect_flags) {
	if (collect_values[0].v_pointer) {
		Adress* object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = adress_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar* value_adress_lcopy_value (const GValue* value, guint n_collect_values, GTypeCValue* collect_values, guint collect_flags) {
	Adress** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = adress_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec* param_spec_adress (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags) {
	ParamSpecAdress* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_ADRESS), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer value_get_adress (const GValue* value) {
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ADRESS), NULL);
	return value->data[0].v_pointer;
}


void value_set_adress (GValue* value, gpointer v_object) {
	Adress* old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ADRESS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_ADRESS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		adress_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		adress_unref (old);
	}
}


void value_take_adress (GValue* value, gpointer v_object) {
	Adress* old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ADRESS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_ADRESS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		adress_unref (old);
	}
}


static void adress_class_init (AdressClass * klass) {
	adress_parent_class = g_type_class_peek_parent (klass);
	ADRESS_CLASS (klass)->finalize = adress_finalize;
}


static void adress_instance_init (Adress * self) {
	gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = g_strdup ("");
	self->_street = _tmp0_;
	_tmp1_ = g_strdup ("");
	self->_housenr = _tmp1_;
	self->ref_count = 1;
}


static void adress_finalize (Adress* obj) {
	Adress * self;
	self = ADRESS (obj);
	_g_free0 (self->_street);
	_g_free0 (self->_housenr);
}


GType adress_get_type (void) {
	static volatile gsize adress_type_id__volatile = 0;
	if (g_once_init_enter (&adress_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { value_adress_init, value_adress_free_value, value_adress_copy_value, value_adress_peek_pointer, "p", value_adress_collect_value, "p", value_adress_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (AdressClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) adress_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Adress), 0, (GInstanceInitFunc) adress_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType adress_type_id;
		adress_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Adress", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&adress_type_id__volatile, adress_type_id);
	}
	return adress_type_id__volatile;
}


gpointer adress_ref (gpointer instance) {
	Adress* self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void adress_unref (gpointer instance) {
	Adress* self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		ADRESS_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


gint _vala_main (void) {
	Adress* x = adress_new ();
	/* set property */
	GValue val = G_VALUE_INIT;
	g_value_init (&val, G_TYPE_STRING);
	g_value_set_string (&val, "hello");
	g_object_set_property(G_OBJECT (x), "street", &val);
	/* printf */
	g_printf("%s\n", x->_street);
	_adress_unref0 (x);
	return 0;
}

int main (int argc, char ** argv) {
	g_thread_init (NULL);
	g_type_init ();
	return _vala_main ();
}



